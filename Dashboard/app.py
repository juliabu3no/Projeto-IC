# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V5yW5y1cRLyqJPKpHJIUKJQwGmZXb-Cp
"""

import pandas as pd
from shiny import App, render, ui
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import matplotlib.image as mpimg
import geopandas as gpd

#!pip install shiny

#!pip install -q gdown
import gdown

url = 'https://drive.google.com/uc?export=download&id=1UGrPGCw_wgOjoVPVHorx4KxumrCaD9UQ'
output = 'dados.csv'
gdown.download(url, output, quiet=False)

url = 'https://drive.google.com/uc?export=download&id=1V6konvrDhrE02h8IPeOFVkItt6qJWphR'
output = 'geojson_sp.json'
gdown.download(url, output, quiet=False)

# Leitura dos dados principais do SINAN
df = pd.read_csv("dados.csv")  # Leitura do arquivo CSV com os dados dos acidentes

# Leitura do arquivo GeoJSON com os municipios de SP
gdf_municipios = gpd.read_file("geojson_sp.json")

# Ajusta a coluna de identificacao do municipio (remove o digito verificador)
gdf_municipios["id"] = gdf_municipios["id"].astype(str).str[:-1]

# Cria dicionario com mapeamento de id para nome de municipio
mapa_municipios = gdf_municipios.set_index("id")["name"].to_dict()

# Mapeia os nomes dos municipios no dataframe principal
df["NOME_MUNICIP"] = df["ID_MUNICIP"].astype(str).map(mapa_municipios)

# Mapeia os tipos de acidente
mapa_acidente = {
    1: 'Serpente',
    2: 'Aranha',
    3: 'Escorpiao',
    4: 'Lagarta',
    5: 'Abelha',
    6: 'Outros',
    9: 'Ignorado'
}
df['TP_ACIDENT'] = df['TP_ACIDENT'].map(mapa_acidente).fillna('Ignorado')

# Mapeia a gravidade do acidente
mapa_gravidade = {
    1: 'Leve',
    2: 'Moderado',
    3: 'Grave',
    9: 'Ignorado'
}
df['TRA_CLASSI'] = df['TRA_CLASSI'].map(mapa_gravidade).fillna('Ignorado')

# Mapeia se foi acidente de trabalho
mapa_trabalho = {
    1: 'Sim',
    2: 'Nao',
    9: 'Ignorado'
}
df['DOENCA_TRA'] = df['DOENCA_TRA'].map(mapa_trabalho).fillna('Ignorado')

# Interface do usuario com estilo, filtros e componentes de visualizacao
dashboard_ui = ui.page_fluid(
    # Estilos personalizados em CSS
    ui.tags.style("""
        body {
            background-color: #f8f9fa;
            font-family: 'Roboto', sans-serif;
        }
        .title-container {
            text-align: center;
            margin-top: 35px;
            margin-bottom: 20px;
        }
        .title {
            font-size: 26px;
            font-weight: bold;
            color: #343a40;
        }
        .panel {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            height: 150px;
            width: 100%;
        }
        .panel label {
            font-size: 16px;
            font-weight: bold;
            color: #343a40;
            margin-bottom: 8px;
            text-align: center;
        }
        .selectize-control {
            width: 90% !important;
            text-align: center;
        }
        .subtitle {
            font-size: 16px;
            font-weight: normal;
            color: #6c757d;
            margin-top: 5px;
        }
        .filter-container {
            text-align: center;
            margin-top: 30px;
            margin-bottom: 20px;
        }
        .filter-title {
            font-size: 18px;
            font-weight: bold;
            color: #343a40;
        }
        .filter-subtitle {
            font-size: 14px;
            font-weight: normal;
            color: #6c757d;
            margin-top: 5px;
        }
        .card {
            display: inline-block;
            width: 30%;
            padding: 20px;
            margin: 10px;
            background: white;
            border-radius: 8px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }
        .card-title {
            font-size: 18px;
            font-weight: bold;
            color: #007bff;
        }
        .card-value {
            font-size: 26px;
            font-weight: bold;
            color: #343a40;
        }
    """),

    # Titulo principal
    ui.div(
        ui.div("Análise de Acidentes com Animais Peçonhentos", class_="title"),
        class_="title-container"
    ),

    ui.div(
        ui.layout_columns(
            ui.div(
                ui.input_selectize(
                    "selectize",
                    label='Selecione um ou mais anos:',
                    choices=["Todos"] + sorted(df["NU_ANO"].astype(str).unique().tolist()),
                    multiple=True,
                ),
                style="white-space: nowrap;",
                class_="panel"
            ),
            ui.div(
                ui.input_selectize(
                    "tipo_animal",
                    label="Escolha o(s) animal(is) peçonhento(s):",
                    choices=["Todos"] + sorted(df["TP_ACIDENT"].unique().tolist()),
                    multiple=True,
                ),
                style="white-space: nowrap;",
                class_="panel"
            ),
            ui.div(
                ui.input_selectize(
                    "municipio",
                    label='Escolha o(s) município(s):',
                    choices=["Todos"] + sorted(df["NOME_MUNICIP"].astype(str).unique().tolist()),
                    multiple=True,
                ),
                style="white-space: nowrap;",
                class_="panel"
            ),
        ),
    ),

    ui.div(
        ui.div(
            ui.div("📊 Total de Casos", class_="card-title"),
            ui.output_text("total_casos"),
            class_="card"
        ),
        ui.div(
            ui.div("⚠️ Taxa de Óbitos", class_="card-title"),
            ui.output_text("total_obitos"),
            class_="card"
        ),
        ui.div(
            ui.div("⏳ Tempo Médio de Atendimento", class_="card-title"),
            ui.output_text("tempo_medio"),
            class_="card"
        ),
    ),

    ui.navset_tab(
        ui.nav_panel("📌 Resumo Geral",
            ui.output_plot("grafico_resumo"),
            ui.output_plot("grafico_gravidade"),
            ui.output_plot("grafico_trabalho"),
        ),
        ui.nav_panel("📈 Tendências Temporais",
            ui.output_plot("grafico_tendencia"),
            ui.output_plot("grafico_mes")
        ),
        ui.nav_panel("📑 Detalhamento dos Dados",
            ui.div("Visualização completa dos registros filtrados.", class_="panel"),
            ui.output_data_frame("tabela_detalhamento")
        )
    )
)

# Servidor com funcoes para gerar dados e graficos
def server(input, output, session):
    # Aplica os filtros selecionados pelo usuario
    def filtrar_dados():
        anos_selecionados = input.selectize()
        tipos_selecionados = input.tipo_animal()
        municipios_selecionados = input.municipio()

        df_filtrado = df.copy()

        if 'Todos' not in anos_selecionados:
            df_filtrado = df_filtrado[df_filtrado['NU_ANO'].astype(str).isin(anos_selecionados)]

        if 'Todos' not in tipos_selecionados:
            df_filtrado = df_filtrado[df_filtrado['TP_ACIDENT'].isin(tipos_selecionados)]

        if 'Todos' not in municipios_selecionados:
            df_filtrado = df_filtrado[df_filtrado['NOME_MUNICIP'].astype(str).isin(municipios_selecionados)]

        return df_filtrado

    # Tabela com os dados filtrados
    @output
    @render.data_frame
    def tabela_detalhamento():
        df_filtrado = filtrar_dados()
        return df_filtrado

    # Total de casos com os filtros aplicados
    @output
    @render.text
    def total_casos():
        return f"{filtrar_dados().shape[0]:,}".replace(",", ".")

    # Taxa de obitos com base nos dados filtrados
    @output
    @render.text
    def total_obitos():
        df_filtrado = filtrar_dados()
        total_casos = df_filtrado.shape[0]
        total_obitos = df_filtrado[df_filtrado["EVOLUCAO"] == 2].shape[0]

        if total_casos == 0:
            return "0%"

        porcentagem_obitos = (total_obitos / total_casos) * 100
        return f"{porcentagem_obitos:.2f}%"

    # Tempo medio de atendimento com base na mediana
    @output
    @render.text
    def tempo_medio():
        """Calcula a mediana das categorias e retorna a descrição correspondente."""

        # Mapeamento dos códigos para as descrições do tempo de atendimento
        categorias_tempo = {
            1: "Menos de 1 hora",
            2: "1 a 3 horas",
            3: "3 a 6 horas",
            4: "6 a 12 horas",
            5: "12 a 24 horas",
            6: "Mais de 24 horas",
            9: None  # Ignorado, não deve ser usado
        }

        if "ANT_TEMPO_" in df.columns:
            df_filtrado = filtrar_dados()
            tempos_validos = df_filtrado["ANT_TEMPO_"]
            tempos_validos = tempos_validos[tempos_validos != 9].dropna()

            if not tempos_validos.empty:
                mediana_valor = np.median(tempos_validos)
                if not np.isnan(mediana_valor):
                    mediana_categoria = int(round(mediana_valor))
                    return categorias_tempo.get(mediana_categoria, "N/A")

            return "N/A"

        return "N/A"



    # Grafico de casos por tipo de animal
    @output
    @render.plot
    def grafico_resumo():
        df_filtrado = filtrar_dados()
        tipos_selecionados = input.tipo_animal()

        if len(tipos_selecionados) > 1 or "Todos" in tipos_selecionados:
            casos_por_animal = df_filtrado['TP_ACIDENT'].value_counts()
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.barplot(x=casos_por_animal.index, y=casos_por_animal.values, palette="Set2", ax=ax)
            ax.set_title("Casos por tipo de animal", fontsize=14, fontweight="bold")
            ax.set_xlabel("Tipo de Animal", fontsize=12, fontweight="bold")
            ax.set_ylabel("Numero de Casos", fontsize=12, fontweight="bold")
            return fig
        return None

    # Grafico de casos por classificacao de gravidade
    @output
    @render.plot
    def grafico_gravidade():
        df_filtrado = filtrar_dados()
        casos_por_classi = df_filtrado['TRA_CLASSI'].value_counts()
        fig, ax = plt.subplots(figsize=(10, 5))
        sns.barplot(x=casos_por_classi.index, y=casos_por_classi.values, palette="Set2", ax=ax)
        ax.set_title("Classificação do acidente", fontsize=14, fontweight="bold")
        ax.set_xlabel("Gravidade", fontsize=12, fontweight="bold")
        ax.set_ylabel("Número de Casos", fontsize=12, fontweight="bold")
        return fig

    # Grafico de acidentes relacionados ao trabalho
    @output
    @render.plot
    def grafico_trabalho():
        df_filtrado = filtrar_dados()
        casos_trab = df_filtrado['DOENCA_TRA'].value_counts()
        fig, ax = plt.subplots(figsize=(10, 5))
        sns.barplot(x=casos_trab.index, y=casos_trab.values, palette="Set2", ax=ax)
        ax.set_title("Acidente de trabalho", fontsize=14, fontweight="bold")
        ax.set_xlabel(" ")
        ax.set_ylabel("Número de Casos", fontsize=12, fontweight="bold")
        return fig

    # Grafico de tendencia temporal anual
    @output
    @render.plot
    def grafico_tendencia():
        df_filtrado = filtrar_dados()
        anos_selecionados = input.selectize()

        if len(anos_selecionados) > 1 or "Todos" in anos_selecionados:
            tendencia = df_filtrado.groupby("NU_ANO")["TP_ACIDENT"].count()
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.lineplot(x=tendencia.index, y=tendencia.values, marker="o", ax=ax)
            ax.set_xticks(tendencia.index)
            ax.set_xticklabels(tendencia.index, fontsize=10)
            ax.set_title("Número dos Casos ao Longo dos Anos", fontsize=14, fontweight="bold")
            ax.set_xlabel("Ano", fontsize=12, fontweight="bold")
            ax.set_ylabel("Número de Casos", fontsize=12, fontweight="bold")
            return fig
        return None

    # Grafico de casos por mes
    @output
    @render.plot
    def grafico_mes():
        df_filtrado = filtrar_dados()
        df_filtrado['DT_NOTIFIC'] = pd.to_datetime(df_filtrado['DT_NOTIFIC'], errors='coerce')
        df_filtrado['MES'] = df_filtrado['DT_NOTIFIC'].dt.month
        casos_por_mes = df_filtrado['MES'].value_counts().sort_index()
        fig, ax = plt.subplots(figsize=(10, 5))
        sns.barplot(x=casos_por_mes.index, y=casos_por_mes.values, palette="Set2", ax=ax)
        ax.set_title("Número de Casos por Mês", fontsize=14, fontweight="bold")
        ax.set_xlabel("Mês", fontsize=12, fontweight="bold")
        ax.set_ylabel("Número de Casos", fontsize=12, fontweight="bold")
        ax.set_xticks(range(12))
        ax.set_xticklabels(["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"])
        return fig

# Inicializacao do aplicativo
app = App(dashboard_ui, server)